<main x-data="actionComponent()" x-init="await loadAction()" class="glass-effect rounded-3xl p-12 shadow-2xl">
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-12">
        <div>
            <h1 class="text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-2">
                Action <span x-text="action.name" class="text-emerald-600"></span>
            </h1>
            <div class="flex items-center gap-3 mb-4">
                <div class="w-8 h-8 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-lg flex items-center justify-center">
                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                    </svg>
                </div>
                <a :href="window.location.protocol + '//' + project.subDomain + '.' + window.location.host + action.path"
                   target="_blank" x-text="project.subDomain + '.' + window.location.host + action.path"
                   class="text-emerald-600 hover:text-emerald-700 font-medium transition-colors duration-200 text-lg"></a>
            </div>
            <div class="flex gap-2">
                <template x-for="method in action.methods">
                    <span class="px-3 py-1 text-sm font-semibold rounded-full"
                          :class="{
                              'bg-green-100 text-green-800': method === 'GET',
                              'bg-blue-100 text-blue-800': method === 'POST',
                              'bg-yellow-100 text-yellow-800': method === 'PUT',
                              'bg-purple-100 text-purple-800': method === 'PATCH',
                              'bg-red-100 text-red-800': method === 'DELETE'
                          }"
                          x-text="method"></span>
                </template>
            </div>
        </div>

        <a :href="`/project/${ project.id }`">
            <button type="button"
                    class="group relative px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 text-white font-semibold cursor-pointer">
                <span class="relative z-10 flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                    <span x-text="project.name"></span>
                </span>
            </button>
        </a>
    </div>

    <!-- Action Management Section -->
    <div class="mb-12">
        <div class="flex flex-col sm:flex-row gap-4 items-center">
            <div x-data="updateActionForm()">
                <button @click="open = true"
                        class="group relative px-6 py-3 bg-gradient-to-r from-amber-500 to-orange-600 rounded-2xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 text-white font-semibold cursor-pointer">
                    <span class="relative z-10 flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        Update Action
                    </span>
                </button>

                <template x-teleport="body">
                    <div x-show="open" x-transition.opacity @click.self="open = false" style="display: none;"
                         class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
                        <div x-show="open" x-transition @keydown.escape.window="open = false"
                             class="glass-effect rounded-3xl shadow-2xl max-w-lg w-full p-8 relative">
                            <form @submit.prevent="await update(); await loadAction()">
                                <div class="flex justify-between items-center border-b border-gray-200 pb-6 mb-6">
                                    <h2 class="text-2xl font-bold text-gray-800">Update Action</h2>
                                    <button @click="open = false" type="button"
                                            class="text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-100 rounded-full cursor-pointer">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>

                                <div class="space-y-6">
                                    <div class="space-y-2">
                                        <label for="update-action-name" class="text-sm font-semibold text-gray-700">Action
                                            Name</label>
                                        <input x-model="name" type="text" id="update-action-name"
                                               placeholder="Enter action name"
                                               class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white/50">
                                    </div>

                                    <div class="space-y-2">
                                        <label for="update-action-path"
                                               class="text-sm font-semibold text-gray-700">Path</label>
                                        <input x-model="path" type="text" id="update-action-path"
                                               placeholder="Enter path (e.g., /api/users)"
                                               class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white/50">
                                    </div>

                                    <div class="space-y-2">
                                        <label for="update-action-methods" class="text-sm font-semibold text-gray-700">HTTP
                                            Methods</label>
                                        <div class="grid grid-cols-2 gap-2">
                                            <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                                <input type="checkbox" value="GET" x-model="methods" class="rounded">
                                                <span class="text-sm font-medium text-gray-700">GET</span>
                                            </label>
                                            <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                                <input type="checkbox" value="POST" x-model="methods" class="rounded">
                                                <span class="text-sm font-medium text-gray-700">POST</span>
                                            </label>
                                            <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                                <input type="checkbox" value="PUT" x-model="methods" class="rounded">
                                                <span class="text-sm font-medium text-gray-700">PUT</span>
                                            </label>
                                            <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                                <input type="checkbox" value="PATCH" x-model="methods" class="rounded">
                                                <span class="text-sm font-medium text-gray-700">PATCH</span>
                                            </label>
                                            <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                                <input type="checkbox" value="DELETE" x-model="methods" class="rounded">
                                                <span class="text-sm font-medium text-gray-700">DELETE</span>
                                            </label>
                                        </div>
                                    </div>

                                    <p x-show="error" x-text="error"
                                       class="text-red-500 text-sm bg-red-50 p-3 rounded-lg"></p>
                                </div>

                                <div class="mt-8 flex gap-4">
                                    <button @click="open = false" type="button"
                                            class="flex-1 px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors duration-200 font-medium cursor-pointer">
                                        Cancel
                                    </button>
                                    <button type="submit"
                                            class="flex-1 px-6 py-3 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-xl hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 font-semibold cursor-pointer">
                                        Update Action
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </template>
            </div>

            <div class="text-gray-500 font-medium">or</div>

            <button type="button"
                    class="group relative px-6 py-3 bg-gradient-to-r from-red-500 to-pink-600 rounded-2xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 text-white font-semibold cursor-pointer"
                    x-data="deleteActionForm()" @click="await deleteAction()">
                <span class="relative z-10 flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    Delete Action
                </span>
            </button>
        </div>
    </div>

    <!-- Module Upload Section -->
    <div class="bg-white/50 backdrop-blur-sm rounded-2xl p-8 shadow-lg border border-white/20">
        <div class="flex items-center gap-4 mb-6">
            <div class="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
            </div>
            <div>
                <h3 class="text-2xl font-bold text-gray-800">WASM Module</h3>
                <p class="text-gray-600">Upload your WebAssembly module for this action</p>
            </div>
        </div>

        <div class="space-y-6">
            <!-- Upload Status -->
            <div class="flex items-center gap-3">
                <div class="w-3 h-3 rounded-full"
                     :class="action.moduleUploaded ? 'bg-green-400 animate-pulse' : 'bg-gray-300'"></div>
                <span class="text-lg font-medium"
                      :class="action.moduleUploaded ? 'text-green-600' : 'text-gray-600'"
                      x-text="action.moduleUploaded ? 'Module Uploaded' : 'No Module Uploaded'"></span>
            </div>

            <!-- File Upload -->
            <div class="space-y-4">
                <div class="relative">
                    <input type="file" @change="selectModuleFile($event)" accept=".wasm"
                           class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                           id="module-file-input"/>
                    <label for="module-file-input"
                           class="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-xl cursor-pointer hover:border-emerald-500 hover:bg-emerald-50 transition-all duration-200">
                        <svg class="w-8 h-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        <span class="text-sm text-gray-500">Click to select .wasm file</span>
                        <span class="text-xs text-gray-400 mt-1">or drag and drop</span>
                    </label>
                </div>

                <div x-show="moduleFile" class="flex items-center gap-3 p-3 bg-emerald-50 rounded-xl">
                    <svg class="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="text-sm font-medium text-emerald-800" x-text="moduleFile?.name"></span>
                </div>

                <button @click="await uploadModule()" :disabled="!moduleFile"
                        class="group relative w-full px-6 py-4 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 text-white font-semibold disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none cursor-pointer">
                    <span class="relative z-10 flex items-center justify-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        Upload Module
                    </span>
                </button>
            </div>
        </div>
    </div>
</main>

<script>
    function actionComponent() {
        return {
            projectId: "{{ .ProjectId }}",
            actionId: "{{ .ActionId }}",

            project: {},
            action: {},

            moduleFile: null,

            async loadAction() {
                this.project = await (await fetch(`/api/project/${ this.projectId }`)).json()
                this.action = await (await fetch(`/api/project/${ this.projectId }/action/${ this.actionId }`)).json()
            },

            selectModuleFile(event) {
                this.moduleFile = event.target.files[0]
            },

            async uploadModule() {
                if (!this.moduleFile) {
                    return
                }

                const formData = new FormData()
                formData.append("module", this.moduleFile)

                try {
                    const res = await fetch(`/api/project/${ this.projectId }/action/${ this.actionId }/upload`, {
                        method: "POST",
                        body: formData,
                    })

                    if (!res.ok) {
                        throw new Error("Upload failed")
                    }

                    alert("File uploaded successfully!")
                } catch (err) {
                    alert("Error: " + err.message)
                }
            },
        }
    }

    function updateActionForm() {
        return {
            open: false,
            projectId: "",
            actionId: "",
            name: "",
            path: "",
            methods: [],
            error: "",

            init() {
                this.$watch("project", value => {
                    this.projectId = value.id
                })
                this.$watch("action", value => {
                    if (this.error !== "") {
                        return
                    }
                    this.actionId = value.id
                    this.name = value.name
                    this.path = value.path
                    this.methods = value.methods
                })
            },

            async update() {
                this.error = ""

                if (this.name === "") {
                    this.error = "Empty name"
                    return
                }

                if (this.path === "") {
                    this.error = "Empty path"
                    return
                }

                if (this.methods.length === 0) {
                    this.error = "At least one method should be selected"
                    return
                }

                try {
                    const res = await fetch(`/api/project/${ this.projectId }/action/${ this.actionId }`, {
                        method: "PUT",
                        headers: {"Content-Type": "application/json"},
                        body: JSON.stringify({
                            name: this.name,
                            path: this.path,
                            methods: this.methods,
                        }),
                    })

                    if (!res.ok) {
                        let msg = await res.text()
                        throw new Error(msg || "Update failed")
                    }

                    this.open = false
                } catch (err) {
                    this.error = err.message
                }
            },
        }
    }

    function deleteActionForm() {
        return {
            projectId: "",
            actionId: "",

            init() {
                this.$watch("project", value => {
                    this.projectId = value.id
                })
                this.$watch("action", value => {
                    this.actionId = value.id
                })
            },

            async deleteAction() {
                const ok = confirm("Are you sure you want to delete this action?")
                if (!ok) {
                    return
                }

                await fetch(`/api/project/${ this.projectId }/action/${ this.actionId }`, {
                    method: "DELETE",
                    headers: {"Content-Type": "application/json"},
                })

                window.location.href = `/project/${ this.projectId }`
            },
        }
    }
</script>
