<main x-data="projectComponent()" x-init="await loadProject()" class="glass-effect rounded-3xl p-12 shadow-2xl">
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-12">
        <div>
            <h1 class="text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-2">
                Project <span x-text="project.name" class="text-emerald-600"></span>
            </h1>
            <div class="flex items-center gap-3 mb-4">
                <div class="w-8 h-8 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-lg flex items-center justify-center">
                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                    </svg>
                </div>
                <a :href="window.location.protocol + '//' + project.subDomain + '.' + window.location.host" target="_blank"
                   x-text="project.subDomain + '.' + window.location.host"
                   class="text-emerald-600 hover:text-emerald-700 font-medium transition-colors duration-200 text-lg"></a>
            </div>
        </div>

        <a href="/dashboard">
            <button type="button"
                    class="group relative px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 text-white font-semibold">
                <span class="relative z-10 flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z"></path>
                    </svg>
                    Dashboard
                </span>
            </button>
        </a>
    </div>

    <!-- Project Management Section -->
    <div class="mb-12">
        <div class="flex flex-col sm:flex-row gap-4 items-center">
            <div x-data="updateProjectForm()">
                <button @click="open = true"
                        class="group relative px-6 py-3 bg-gradient-to-r from-amber-500 to-orange-600 rounded-2xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 text-white font-semibold">
                    <span class="relative z-10 flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        Update Project
                    </span>
                </button>

                <template x-teleport="body">
                    <div x-show="open" x-transition.opacity @click.self="open = false" style="display: none;"
                         class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
                        <div x-show="open" x-transition @keydown.escape.window="open = false"
                             class="glass-effect rounded-3xl shadow-2xl max-w-md w-full p-8 relative">
                            <form @submit.prevent="await update(); await loadProject()">
                                <div class="flex justify-between items-center border-b border-gray-200 pb-6 mb-6">
                                    <h2 class="text-2xl font-bold text-gray-800">Update Project</h2>
                                    <button @click="open = false" type="button" class="text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-100 rounded-full">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>

                                <div class="space-y-6">
                                    <div class="space-y-2">
                                        <label for="create-project-name" class="text-sm font-semibold text-gray-700">Project Name</label>
                                        <input x-model="name" type="text" id="create-project-name" placeholder="Enter project name"
                                               class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white/50">
                                    </div>

                                    <p x-show="error" x-text="error" class="text-red-500 text-sm bg-red-50 p-3 rounded-lg"></p>
                                </div>

                                <div class="mt-8 flex gap-4">
                                    <button @click="open = false" type="button"
                                            class="flex-1 px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors duration-200 font-medium">
                                        Cancel
                                    </button>
                                    <button type="submit"
                                            class="flex-1 px-6 py-3 bg-gradient-to-r from-amber-500 to-orange-600 text-white rounded-xl hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 font-semibold">
                                        Update Project
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </template>
            </div>

            <div class="text-gray-500 font-medium">or</div>

            <button type="button"
                    class="group relative px-6 py-3 bg-gradient-to-r from-red-500 to-pink-600 rounded-2xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 text-white font-semibold"
                    x-data="deleteProjectForm()" @click="await deleteProject()">
                <span class="relative z-10 flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    Delete Project
                </span>
            </button>
        </div>
    </div>

    <!-- Create Action Section -->
    <div class="mb-12">
        <div x-data="createActionForm()">
            <button @click="open = true"
                    class="group relative px-8 py-4 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 text-white font-semibold text-lg">
                <span class="relative z-10 flex items-center gap-3">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Create New Action
                </span>
            </button>

            <template x-teleport="body">
                <div x-show="open" x-transition.opacity @click.self="open = false" style="display: none;"
                     class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
                    <div x-show="open" x-transition @keydown.escape.window="open = false"
                         class="glass-effect rounded-3xl shadow-2xl max-w-lg w-full p-8 relative">
                        <form @submit.prevent="await create(); await loadActions()">
                            <div class="flex justify-between items-center border-b border-gray-200 pb-6 mb-6">
                                <h2 class="text-2xl font-bold text-gray-800">Create New Action</h2>
                                <button @click="open = false" type="button" class="text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-100 rounded-full">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>

                            <div class="space-y-6">
                                <div class="space-y-2">
                                    <label for="create-action-name" class="text-sm font-semibold text-gray-700">Action Name</label>
                                    <input x-model="name" type="text" id="create-action-name" placeholder="Enter action name"
                                           class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white/50">
                                </div>

                                <div class="space-y-2">
                                    <label for="create-action-path" class="text-sm font-semibold text-gray-700">Path</label>
                                    <input x-model="path" type="text" id="create-action-path" placeholder="Enter path (e.g., /api/users)"
                                           class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white/50">
                                </div>

                                <div class="space-y-2">
                                    <label for="create-action-methods" class="text-sm font-semibold text-gray-700">HTTP Methods</label>
                                    <div class="grid grid-cols-2 gap-2">
                                        <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                            <input type="checkbox" value="GET" x-model="methods" class="rounded">
                                            <span class="text-sm font-medium text-gray-700">GET</span>
                                        </label>
                                        <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                            <input type="checkbox" value="POST" x-model="methods" class="rounded">
                                            <span class="text-sm font-medium text-gray-700">POST</span>
                                        </label>
                                        <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                            <input type="checkbox" value="PUT" x-model="methods" class="rounded">
                                            <span class="text-sm font-medium text-gray-700">PUT</span>
                                        </label>
                                        <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                            <input type="checkbox" value="PATCH" x-model="methods" class="rounded">
                                            <span class="text-sm font-medium text-gray-700">PATCH</span>
                                        </label>
                                        <label class="flex items-center gap-2 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 cursor-pointer transition-colors">
                                            <input type="checkbox" value="DELETE" x-model="methods" class="rounded">
                                            <span class="text-sm font-medium text-gray-700">DELETE</span>
                                        </label>
                                    </div>
                                </div>

                                <p x-show="error" x-text="error" class="text-red-500 text-sm bg-red-50 p-3 rounded-lg"></p>
                            </div>

                            <div class="mt-8 flex gap-4">
                                <button @click="open = false" type="button"
                                        class="flex-1 px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors duration-200 font-medium">
                                    Cancel
                                </button>
                                <button type="submit"
                                        class="flex-1 px-6 py-3 bg-gradient-to-r from-emerald-500 to-teal-600 text-white rounded-xl hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 font-semibold">
                                    Create Action
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </template>
        </div>
    </div>

    <!-- Actions Section -->
    <div x-init="await loadActions()">
        <div class="flex items-center gap-4 mb-8">
            <div class="flex items-center gap-3">
                <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                </div>
                <h2 class="text-3xl font-bold text-gray-800">Actions</h2>
            </div>
            <div class="flex-1 h-px bg-gradient-to-r from-gray-200 to-transparent"></div>
        </div>

        <div class="space-y-4">
            <template x-for="(action, index) in actions" :key="action.id">
                <div class="group bg-white/50 backdrop-blur-sm rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-white/20 hover:border-white/40"
                     @dragover.prevent @drop="drop(index)">
                    <div class="flex items-center gap-4">
                        <!-- Drag Handle -->
                        <button type="button" draggable="true" @dragstart="dragStart(index)"
                                class="w-10 h-10 bg-gray-200 hover:bg-gray-300 rounded-xl flex items-center justify-center cursor-move transition-colors duration-200"
                                title="Drag to reorder">
                            <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                            </svg>
                        </button>

                        <!-- Action Info -->
                        <div class="flex-1">
                            <div class="flex items-center gap-3 mb-2">
                                <h3 class="text-xl font-semibold text-gray-800" x-text="action.name"></h3>
                                <div class="flex gap-1">
                                    <template x-for="method in action.methods">
                                        <span class="px-2 py-1 text-xs font-semibold rounded-full"
                                              :class="{
                                                  'bg-green-100 text-green-800': method === 'GET',
                                                  'bg-blue-100 text-blue-800': method === 'POST',
                                                  'bg-yellow-100 text-yellow-800': method === 'PUT',
                                                  'bg-purple-100 text-purple-800': method === 'PATCH',
                                                  'bg-red-100 text-red-800': method === 'DELETE'
                                              }"
                                              x-text="method"></span>
                                    </template>
                                </div>
                            </div>
                            <p class="text-gray-600 font-mono text-sm" x-text="action.path"></p>
                        </div>

                        <!-- Configure Button -->
                        <a :href="`/project/${ project.id }/action/${ action.id }`">
                            <button type="button"
                                    class="group/btn relative px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 text-white font-semibold">
                                <span class="relative z-10 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    </svg>
                                    Configure
                                </span>
                            </button>
                        </a>
                    </div>
                </div>
            </template>

            <!-- Empty state -->
            <div x-show="actions.length === 0" class="text-center py-12">
                <div class="w-20 h-20 bg-gradient-to-br from-gray-300 to-gray-400 rounded-2xl mx-auto mb-6 flex items-center justify-center">
                    <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                </div>
                <h3 class="text-xl font-semibold text-gray-600 mb-2">No actions yet</h3>
                <p class="text-gray-500">Create your first action to start building your API</p>
            </div>
        </div>
    </div>
</main>

<script>
    function projectComponent() {
        return {
            projectId: "{{ .ProjectId }}",

            project: {},
            actions: [],

            dragIndex: null,

            async loadProject() {
                this.project = await (await fetch(`/api/project/${ this.projectId }`)).json()
            },

            async loadActions() {
                this.actions = await (await fetch(`/api/project/${ this.projectId }/action`)).json()
            },

            dragStart(index) {
                this.dragIndex = index
            },

            async drop(index) {
                if (this.dragIndex === null || this.dragIndex === index) {
                    return
                }

                const moved = this.actions.splice(this.dragIndex, 1)[0]
                this.actions.splice(index, 0, moved)

                this.dragIndex = null

                await fetch(`/api/project/${ this.projectId }/action/order`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({
                        ids: this.actions.map(a => a.id),
                    }),
                })
            },
        }
    }

    function updateProjectForm() {
        return {
            open: false,
            projectId: "",
            name: "",
            error: "",

            init() {
                this.$watch("project", value => {
                    if (this.error !== "") {
                        return
                    }
                    this.projectId = value.id
                    this.name = value.name
                })
            },

            async update() {
                this.error = ""

                if (this.name === "") {
                    this.error = "Empty name"
                    return
                }

                try {
                    let res = await fetch(`/api/project/${ this.projectId }`, {
                        method: "PUT",
                        headers: {"Content-Type": "application/json"},
                        body: JSON.stringify({
                            name: this.name,
                        }),
                    })

                    if (!res.ok) {
                        let msg = await res.text()
                        throw new Error(msg || "Update failed")
                    }

                    this.open = false
                } catch (err) {
                    this.error = err.message
                }
            },
        }
    }

    function deleteProjectForm() {
        return {
            projectId: "",

            init() {
                this.$watch("project", value => {
                    this.projectId = value.id
                })
            },

            async deleteProject() {
                const ok = confirm("Are you sure you want to delete this project?")
                if (!ok) {
                    return
                }

                await fetch(`/api/project/${ this.projectId }`, {
                    method: "DELETE",
                    headers: {"Content-Type": "application/json"},
                })

                window.location.href = "/dashboard"
            },
        }
    }

    function createActionForm() {
        return {
            open: false,
            name: "",
            path: "",
            methods: [],
            error: "",

            projectId: "",

            init() {
                this.$watch("project", value => {
                    this.projectId = value.id
                })
            },

            async create() {
                this.error = ""

                if (this.name === "") {
                    this.error = "Empty name"
                    return
                }

                if (this.path === "") {
                    this.error = "Empty path"
                    return
                }

                if (this.methods.length === 0) {
                    this.error = "At least one method should be selected"
                    return
                }

                try {
                    let res = await fetch(`/api/project/${ this.projectId }/action`, {
                        method: "POST",
                        headers: {"Content-Type": "application/json"},
                        body: JSON.stringify({
                            name: this.name,
                            path: this.path,
                            methods: this.methods,
                        }),
                    })

                    if (!res.ok) {
                        let msg = await res.text()
                        throw new Error(msg || "Creation failed")
                    }

                    this.open = false
                    this.name = ""
                    this.path = ""
                    this.methods = []
                } catch (err) {
                    this.error = err.message
                }
            },
        }
    }

</script>
